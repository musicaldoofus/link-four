{"version":3,"sources":["components/HUD/index.js","components/Token/index.js","components/Column/index.js","helpers/winnerTests.js","helpers/getOpenColumns.js","helpers/getUpdatedColumnList.js","components/GameBoard/index.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["HUD","_ref","scores","handleRefresh","react_default","a","createElement","className","id","user","cpu","onClick","Token","concat","Slot","components_Token","Column","props","isColumnFull","slotStates","every","slot","undefined","slots","map","i","Column_Slot","key","ind","winnerTests","role","columns","col","colIndex","_","length","memo","toRoleIndex","s","onlyIndices","onlyInMemo","indexOf","updatedMemo","filter","some","getOpenColumns","column","c","getUpdatedColumnList","currentUser","openSlot","slotIndex","updatedColumnList","slice","updatedColumn","GameBoard","_this","Object","classCallCheck","this","arrayLength","possibleConstructorReturn","getPrototypeOf","call","factorDepth","initColumns","Array","from","state","cpuMoveTime","handleUserColSelect","bind","assertThisInitialized","isWinner","handleAdvanceTurn","handleCPUMove","el","_this2","handleIncrementScore","setState","handleWinner","updatedUser","_this3","openColumns","cpuSelectedColumn","Math","floor","random","window","setTimeout","_this4","test","_this5","components_Column","style","gridTemplateColumns","Component","Modal","containerClassNames","transitionTime","closeModal","closeOutTime","children","App","initFactorDepth","initScores","initState","showGameBoard","winner","handleWindowHeightCheck","amt","_scores","opponentRole","defineProperty","successIncrement","increment","toggleState","assign","showFooter","innerHeight","addEventListener","gridSpaces","tokens","width","console","log","boardContainerStyle","height","components_GameBoard","components_HUD","components_Modal","src","alt","title","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca4a7503.chunk.js","sourcesContent":["import React from 'react';\r\nimport './HUD.css';\r\n\r\nconst HUD = ({scores, handleRefresh}) => {\r\n    return (\r\n        <div className=\"heads-up-display\">\r\n            <div id=\"user-score\">\r\n                <div>{scores.user}</div>\r\n                <div>User</div>\r\n            </div>\r\n            <div id=\"cpu-score\">\r\n                <div>{scores.cpu}</div>\r\n                <div>CPU</div>\r\n            </div>\r\n            <div id=\"controls\">\r\n                <button onClick={handleRefresh}>Restart</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HUD;","import React from 'react';\r\nimport './Token.css';\r\n\r\nconst Token = ({user}) => (\r\n\t<div className={`token ${user}`}></div>\r\n);\r\n\r\nexport default Token;","import React from 'react';\r\nimport Token from '../Token';\r\nimport './Column.css';\r\n\r\nconst Slot = ({user}) => (\r\n\t<div className=\"slot\">\r\n\t\t{user && <Token user={user}/>}\r\n\t</div>\r\n);\r\n\r\nconst Column = (props) => {\r\n\tconst isColumnFull = props.slotStates.every(slot => slot !== undefined);\r\n\tconst slots = props.slotStates.map((user, i) => <Slot key={i} user={user}/>);\r\n\treturn (\r\n\t\t<div className={`column ${isColumnFull ? 'closed' : 'open'}`} onClick={() => props.onClick(props.ind)}>\r\n\t\t\t{slots}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Column;","const diagonal = (role, columns) => {\r\n    const equalIndex = (col, colIndex) => columns[colIndex][colIndex] === role;\r\n    return columns.every(equalIndex);\r\n}\r\nconst invertedDiagonal = (role, columns) => {\r\n    const invertedIndex = (_, colIndex) => columns[colIndex][columns.length - 1 - colIndex] === role;\r\n    return columns.every(invertedIndex);\r\n};\r\nconst horizontalLine = (role, columns) => {\r\n    let memo = [];\r\n    const toRoleIndex = (s, i) => s === role ? i : null;\r\n    const onlyIndices = (i) => i !== null;\r\n    const onlyInMemo= (i) => memo.length === 0 ? true : memo.indexOf(i) > -1;\r\n    for (let colIndex = 0; colIndex < columns.length; colIndex++) {\r\n        const updatedMemo = columns[colIndex]\r\n            .map(toRoleIndex)\r\n            .filter(onlyIndices);\r\n        if (updatedMemo.length === 0) return false;\r\n        else {\r\n            memo = updatedMemo.filter(onlyInMemo);\r\n            if (memo.length === 0) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nconst verticalLine = (role, columns) => {\r\n    const isColumnFull = (col) => col.every(slot => slot === role);\r\n    return columns.some(isColumnFull);\r\n}\r\n\r\nconst winnerTests = [\r\n    diagonal,\r\n    invertedDiagonal,\r\n    horizontalLine,\r\n    verticalLine\r\n]\r\n\r\nexport default winnerTests;","const getOpenColumns = (columns) => {\r\n    return columns\r\n        .map((column, colIndex) => column.some(slot => slot === undefined) ? colIndex : null)\r\n        .filter(c => c !== null);\r\n}\r\n\r\nexport default getOpenColumns;","const getUpdatedColumnList = ({currentUser, columns}, colIndex) => {\r\n    let openSlot = columns.length - 1;\r\n    for (let slotIndex = 0; slotIndex <= openSlot; slotIndex++) {\r\n        if (columns[colIndex][slotIndex] !== undefined) {\r\n            openSlot = slotIndex - 1;\r\n            break;\r\n        }\r\n    }\r\n    const updatedColumnList = columns.slice();\r\n    const updatedColumn = updatedColumnList[colIndex];\r\n    updatedColumn[openSlot] = currentUser;\r\n    updatedColumnList[colIndex] = updatedColumn;\r\n    return updatedColumnList;\r\n}\r\n\r\nexport default getUpdatedColumnList;","import React, { Component } from 'react';\r\nimport Column from '../Column';\r\nimport winnerTests from '../../helpers/winnerTests';\r\nimport getOpenColumns from '../../helpers/getOpenColumns';\r\nimport getUpdatedColumnList from '../../helpers/getUpdatedColumnList';\r\nimport './GameBoard.css';\r\n\r\nclass GameBoard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconst arrayLength = {\r\n\t\t\tlength: this.props.factorDepth\r\n\t\t};\r\n\t\tconst initColumns = Array.from(arrayLength, _ => Array.from(arrayLength, _ => undefined));\r\n\t\tthis.state = {\r\n\t\t\tcurrentUser: 'user',\r\n\t\t\tcolumns: initColumns\r\n\t\t};\r\n\t\tthis.cpuMoveTime = 400;\r\n\t\tthis.handleUserColSelect = this.handleUserColSelect.bind(this);\r\n\t\tthis.isWinner = this.isWinner.bind(this);\r\n\t\tthis.handleAdvanceTurn = this.handleAdvanceTurn.bind(this);\r\n\t\tthis.handleCPUMove = this.handleCPUMove.bind(this);\r\n\t}\r\n\r\n\thandleUserColSelect(colIndex) {\r\n\t\tif (this.state.currentUser !== 'user' || this.isWinner()) return;\r\n\t\tconst isColOpen = this.state.columns[colIndex].some(el => el === undefined);\r\n\t\tif (!isColOpen) return;\r\n\t\tthis.handleAdvanceTurn(getUpdatedColumnList(this.state, colIndex));\r\n\t}\r\n\r\n\thandleAdvanceTurn(updatedColumnList) {\r\n\t\tthis.props.handleIncrementScore(this.state.currentUser, 1);\r\n\t\tconst isWinner = this.isWinner();\r\n\t\tif (isWinner) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcolumns: updatedColumnList\r\n\t\t\t}, () => this.props.handleWinner(isWinner === 'tie' ? 'tie' : this.state.currentUser));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst updatedUser = this.state.currentUser === 'user' ? 'cpu' : 'user';\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentUser: updatedUser,\r\n\t\t\t\tcolumns: updatedColumnList\r\n\t\t\t}, () => {\r\n\t\t\t\tif (this.state.currentUser === 'cpu') this.handleCPUMove();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\thandleCPUMove() {\r\n\t\tconst openColumns = getOpenColumns(this.state.columns);\r\n\t\tconst cpuRandIndex = Math.floor(Math.random() * openColumns.length);\r\n\t\tconst cpuSelectedColumn = openColumns[cpuRandIndex];\r\n\t\twindow.setTimeout(\r\n\t\t\t() => this.handleAdvanceTurn(getUpdatedColumnList(this.state, cpuSelectedColumn))\r\n\t\t\t, this.cpuMoveTime);\r\n\t}\r\n\r\n\tisWinner() {\r\n\t\tconst isTie = () => {\r\n\t\t\tconst openColumns = getOpenColumns(this.state.columns);\r\n\t\t\treturn openColumns.length === 0 ? 'tie' : false;\r\n\t\t}\r\n\t\treturn winnerTests.some(test => test(this.state.currentUser, this.state.columns)) || isTie();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst columns = this.state.columns.map((slotStates, i) => (\r\n\t\t\t<Column\r\n\t\t\t\tkey={i}\r\n\t\t\t\tind={i}\r\n\t\t\t\tonClick={this.handleUserColSelect}\r\n\t\t\t\tslotStates={slotStates}\r\n\t\t\t/>\r\n\t\t));\r\n\t\treturn (\r\n\t\t\t<div className=\"game-board\" style={{gridTemplateColumns: `repeat(${this.props.factorDepth}, 4em)`}}>\r\n\t\t\t\t{columns}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GameBoard;","import React, { Component } from 'react';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            containerClassNames: ''\r\n        };\r\n        this.transitionTime = 400; //find a way to clean up - duplicate value in stylesheet\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n        fade in modal container by adding a class after 100ms\r\n        declare callback for setState: set class to closed\r\n        */\r\n        const closeModal = () => {\r\n            return window.setTimeout(() => this.setState({\r\n                containerClassNames: 'closed'\r\n            }), this.props.closeOutTime - this.transitionTime)\r\n        }\r\n        window.setTimeout(() => this.setState({\r\n            containerClassNames: 'open'\r\n        }, closeModal)\r\n        , 50);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`modal-container${this.state.containerClassNames !== '' ? ' ' + this.state.containerClassNames : ''}`}>\r\n                <div className=\"modal\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport HUD from './components/HUD';\r\nimport GameBoard from './components/GameBoard';\r\nimport Modal from './components/Modal';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.initFactorDepth = 3;\r\n\t\tthis.initScores = {\r\n\t\t\tuser: 0,\r\n\t\t\tcpu: 0\r\n\t\t};\r\n\t\tthis.initState = {\r\n\t\t\tshowGameBoard: true,\r\n\t\t\tfactorDepth: this.initFactorDepth,\r\n\t\t\tscores: this.initScores,\r\n\t\t\twinner: undefined\r\n\t\t};\r\n\t\tthis.state = this.initState;\r\n\t\tthis.closeOutTime = 2500;\r\n\t\tthis.handleIncrementScore = this.handleIncrementScore.bind(this);\r\n\t\tthis.handleWinner = this.handleWinner.bind(this);\r\n\t\tthis.handleRefresh = this.handleRefresh.bind(this);\r\n\t\tthis.handleWindowHeightCheck = this.handleWindowHeightCheck.bind(this);\r\n\t}\r\n\r\n\thandleIncrementScore(role, amt) {\r\n\t\tconst opponentRole = role === 'user' ? 'cpu' : 'user';\r\n\t\tconst scores = {\r\n\t\t\t[role]: this.state.scores[role] + (amt ? amt : 1),\r\n\t\t\t[opponentRole]: this.state.scores[opponentRole]\r\n\t\t};\r\n\t\tthis.setState({scores});\r\n\t}\r\n\t\r\n\thandleWinner(winner) {\r\n\t\tconst successIncrement = this.state.factorDepth * 2;\r\n\t\tconst increment = winner === 'tie' ? -successIncrement : 1;\r\n\t\tconst user = winner === 'user' ? this.state.scores.user + successIncrement : this.state.scores.user + increment;\r\n\t\tconst cpu = winner === 'cpu' ? this.state.scores.cpu + successIncrement : this.state.scores.cpu + increment;\r\n\t\tconst scores = {\r\n\t\t\tuser,\r\n\t\t\tcpu\r\n\t\t};\r\n\t\tthis.setState({\r\n\t\t\twinner,\r\n\t\t\tscores\r\n\t\t}, () => window.setTimeout(() => this.handleRefresh(winner === 'tie' ? -1 : 1), this.closeOutTime));\r\n\t}\r\n\r\n\thandleRefresh(increment) {\r\n\t\tconst factorDepth = increment ? this.state.factorDepth + increment : this.initFactorDepth;\r\n\t\tconst scores = increment ? this.state.scores : this.initScores;\r\n\t\tconst toggleState = Object.assign({}, this.initState, {\r\n\t\t\tshowGameBoard: false,\r\n\t\t\tfactorDepth,\r\n\t\t\tscores\r\n\t\t});\r\n\t\tthis.setState(toggleState, () => {\r\n\t\t\tthis.handleWindowHeightCheck();\r\n\t\t\twindow.setTimeout(() => this.setState({\r\n\t\t\t\tshowGameBoard: true\r\n\t\t\t}), increment ? 400 : 10)\r\n\t\t});\r\n\t}\r\n\r\n\thandleWindowHeightCheck() {\r\n\t\tconst heightEm = ((window.innerHeight * 3)/4)/12;\r\n\t\tconst showFooter = heightEm > (8 + (this.state.factorDepth * 4) + this.state.factorDepth + 8);\r\n\t\tthis.setState({showFooter});\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.handleWindowHeightCheck();\r\n\t\twindow.addEventListener('resize', this.handleWindowHeightCheck)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst gridSpaces = (this.state.factorDepth - 1) * 0.5;\r\n\t\tconst tokens = this.state.factorDepth * 4;\r\n\t\tconst gameBoardPadding = 2;\r\n\t\tconst padding = 3.5;\r\n\t\tconst hud = 6;\r\n\t\tconst width = `${gridSpaces + tokens + padding + hud}em`;\r\n\t\tconsole.log(width);\r\n\t\tconst boardContainerStyle = {\r\n\t\t\twidth,\r\n\t\t\theight: `${(this.state.factorDepth * 4) + this.state.factorDepth + 3}em`,\r\n\t\t\tgridTemplateColumns: `${gridSpaces + tokens + gameBoardPadding}em 6em`\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n\t\t\t\t<main className=\"board-container\" style={boardContainerStyle}>\r\n\t\t\t\t\t{this.state.showGameBoard ? (\r\n\t\t\t\t\t\t<GameBoard\r\n\t\t\t\t\t\t\tfactorDepth={this.state.factorDepth}\r\n\t\t\t\t\t\t\thandleIncrementScore={this.handleIncrementScore}\r\n\t\t\t\t\t\t\thandleWinner={this.handleWinner}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className=\"empty-game-board\"></div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<HUD\r\n\t\t\t\t\t\tscores={this.state.scores}\r\n\t\t\t\t\t\thandleRefresh={() => this.handleRefresh()}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</main>\r\n\t\t\t\t{this.state.winner && (\r\n\t\t\t\t\t<Modal\r\n\t\t\t\t\t\tcloseOutTime={this.closeOutTime}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<p>{this.state.winner === 'tie' ? 'Tie...' : 'Winner!'}</p>\r\n\t\t\t\t\t\t<p>{this.state.winner === 'tie' ? ':-(' : this.state.winner}</p>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t)}\r\n\t\t\t\t<footer className={this.state.showFooter ? 'showing' : 'hidden'} role=\"contentinfo\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\tMade with <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\" alt=\"React\" title=\"React\"/> and hosted with <span title=\"love\">&#9829;</span> by GitHub\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</footer>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}