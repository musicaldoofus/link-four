{"version":3,"sources":["components/Token/index.js","components/Column/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["Token","_ref","user","react_default","a","createElement","className","concat","Slot","components_Token","Column","_ref2","slotStates","ind","onClick","isColumnFull","every","slot","undefined","slots","map","i","Column_Slot","key","GameBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","columns","Array","from","length","factorDepth","_","state","currentUser","handleUserColSelect","bind","assertThisInitialized","getUpdatedColumnList","isWinner","handleAdvanceTurn","setCPUMove","colIndex","isClosed","some","el","openSlot","slotIndex","updatedColumn","updatedColumnList","role","_this2","invertedDiagonal","memo","toRoleIndex","s","onlyIndices","onlyInMemo","indexOf","updatedMemo","filter","horizontalLine","verticalLine","_this3","setState","handleWinner","updatedUser","_this4","openColumns","column","c","cpuSelectedColumn","Math","floor","random","window","setTimeout","_this5","components_Column","style","gridTemplateColumns","Component","App","winner","id","gameState","components_GameBoard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1f2b050.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Token.css';\r\n\r\nconst Token = ({user}) => (\r\n\t<div className={`token ${user}`}></div>\r\n);\r\n\r\nexport default Token;","import React from 'react';\r\nimport Token from '../Token';\r\nimport './Column.css';\r\n\r\nconst Slot = ({user}) => (\r\n\t<div className=\"slot\">\r\n\t\t{user && <Token user={user}/>}\r\n\t</div>\r\n);\r\n\r\nconst Column = ({slotStates, ind, onClick}) => {\r\n\tconst isColumnFull = slotStates.every(slot => slot !== undefined);\r\n\tconst slots = slotStates.map((user, i) => <Slot key={i} user={user}/>);\r\n\treturn (\r\n\t\t<div className={`column ${isColumnFull ? 'closed' : 'open'}`} onClick={() => onClick(ind)}>\r\n\t\t\t{slots}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Column;","import React, { Component } from 'react';\r\nimport Column from '../Column';\r\nimport './GameBoard.css';\r\n\r\nclass GameBoard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconst columns = Array.from({length: this.props.factorDepth},\r\n\t\t\t_ => Array.from({length: this.props.factorDepth}, \r\n\t\t\t\t_ => undefined));\r\n\t\tthis.state = {\r\n\t\t\tcurrentUser: 'user',\r\n\t\t\tcolumns\r\n\t\t};\r\n\t\tthis.handleUserColSelect = this.handleUserColSelect.bind(this);\r\n\t\tthis.getUpdatedColumnList = this.getUpdatedColumnList.bind(this);\r\n\t\tthis.isWinner = this.isWinner.bind(this);\r\n\t\tthis.handleAdvanceTurn = this.handleAdvanceTurn.bind(this);\r\n\t\tthis.setCPUMove = this.setCPUMove.bind(this);\r\n\t}\r\n\t\r\n\thandleUserColSelect(colIndex) {\r\n\t\tif (this.state.currentUser !== 'user' || this.props.isClosed) return;\r\n\t\tconst isColOpen = this.state.columns[colIndex].some(el => el === undefined);\r\n\t\tif (!isColOpen) return;\r\n\t\tthis.handleAdvanceTurn(this.getUpdatedColumnList(colIndex));\r\n\t}\r\n\t\r\n\tgetUpdatedColumnList(colIndex) {\r\n\t\tlet openSlot = this.props.factorDepth - 1;\r\n\t\tfor (let slotIndex = 0; slotIndex <= openSlot; slotIndex++) {\r\n\t\t\tif (this.state.columns[colIndex][slotIndex] !== undefined) {\r\n\t\t\t\topenSlot = slotIndex - 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst updatedColumn = this.state.columns[colIndex];\r\n\t\tupdatedColumn[openSlot] = this.state.currentUser;\r\n\t\tconst updatedColumnList = this.state.columns;\r\n\t\tupdatedColumnList[colIndex] = updatedColumn;\r\n\t\treturn updatedColumnList;\r\n\t}\r\n\t\r\n\tisWinner() {\r\n\t\tconst diagonal = (role) => {\r\n\t\t\tconst equalIndex = (_, colIndex) => this.state.columns[colIndex][colIndex] === role;\r\n\t\t\treturn this.state.columns.every(equalIndex);\r\n\t\t}\r\n\t\tconst invertedDiagonal = (role) => {\r\n\t\t\tconst invertedIndex = (_, colIndex) => this.state.columns[colIndex][this.props.factorDepth - 1 - colIndex] === role;\r\n\t\t\treturn this.state.columns.every(invertedIndex);\r\n\t\t};\r\n\t\tconst horizontalLine = (role) => {\r\n\t\t\tlet memo = [];\r\n\t\t\tconst toRoleIndex = (s, i) => s === role ? i : null;\r\n\t\t\tconst onlyIndices = (i) => i !== null;\r\n\t\t\tconst onlyInMemo= (i) => memo.length === 0 ? true : memo.indexOf(i) > -1;\r\n\t\t\tfor (let colIndex = 0; colIndex < this.props.factorDepth; colIndex++) {\r\n\t\t\t\t// if (colIndex === 0) memo = slotIndices;\r\n\t\t\t\tconst updatedMemo = this.state.columns[colIndex]\r\n\t\t\t\t\t.map(toRoleIndex)\r\n\t\t\t\t\t.filter(onlyIndices);\r\n\t\t\t\t// console.log('updated memo for', role, updatedMemo);\r\n\t\t\t\tif (updatedMemo.length === 0) return false;\r\n\t\t\t\telse {\r\n\t\t\t\t\tmemo = updatedMemo.filter(onlyInMemo);\r\n\t\t\t\t\tif (memo.length === 0) return false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconst verticalLine = (role) => {\r\n\t\t\tconst isColumnFull = (_, colIndex) => this.state.columns[colIndex].every(slot => slot === role);\r\n\t\t\treturn this.state.columns.some(isColumnFull);\r\n\t\t}\r\n\t\t// const winnerTests = [\r\n\t\t\t// diagonal,\r\n\t\t\t// invertedDiagonal,\r\n\t\t\t// horizontalLine,\r\n\t\t\t// verticalLine\r\n\t\t// ];\r\n\t\t// console.log('tests for:', this.state.currentUser);\r\n\t\t// winnerTests.forEach(test => console.log(test(this.state.currentUser)));\r\n\t\treturn diagonal(this.state.currentUser) ||\r\n\t\t\tinvertedDiagonal(this.state.currentUser) ||\r\n\t\t\thorizontalLine(this.state.currentUser) ||\r\n\t\t\tverticalLine(this.state.currentUser);\r\n\t}\r\n\r\n\thandleAdvanceTurn(updatedColumnList) {\r\n\t\tif (this.isWinner()) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcolumns: updatedColumnList\r\n\t\t\t}, () => this.props.handleWinner(this.state.currentUser)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tconst updatedUser = this.state.currentUser === 'user' ? 'cpu' : 'user';\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentUser: updatedUser,\r\n\t\t\t\tcolumns: updatedColumnList\r\n\t\t\t}, () => {\r\n\t\t\t\tif (this.state.currentUser === 'cpu') this.setCPUMove();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetCPUMove() {\r\n\t\tconst openColumns = this.state.columns\r\n\t\t\t.map((column, colIndex) => column.some(slot => slot === undefined) ? colIndex : null)\r\n\t\t\t.filter(c => c !== null);\r\n\t\tconst cpuSelectedColumn = openColumns[Math.floor(Math.random() * openColumns.length)];\r\n\t\twindow.setTimeout(\r\n\t\t\t() => this.handleAdvanceTurn(this.getUpdatedColumnList(cpuSelectedColumn))\r\n\t\t\t, 400);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst columns = this.state.columns.map((slotStates, i) => <Column key={i} ind={i} onClick={this.handleUserColSelect} slotStates={slotStates}/>);\r\n\t\treturn (\r\n\t\t\t<div className=\"columns-container\" style={{gridTemplateColumns: `repeat(${this.props.factorDepth}, 64px)`}}>\r\n\t\t\t\t{columns}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GameBoard;","import React, { Component } from 'react';\r\nimport GameBoard from './components/GameBoard';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tfactorDepth: 4,\r\n\t\t\twinner: undefined\r\n\t\t};\r\n\t\tthis.handleWinner = this.handleWinner.bind(this);\r\n\t}\r\n\t\r\n\thandleWinner(winner) {\r\n\t\tthis.setState({winner});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n\t\t\t\t<div id=\"display\">\r\n\t\t\t\t\t<p>Winner: {this.state.winner}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.state.gameState !== 'winner' &&\r\n\t\t\t\t\t<GameBoard\r\n\t\t\t\t\t\tisClosed={this.state.winner !== undefined}\r\n\t\t\t\t\t\tfactorDepth={this.state.factorDepth}\r\n\t\t\t\t\t\thandleWinner={this.handleWinner}\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}