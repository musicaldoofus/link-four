{"version":3,"sources":["components/HUD/index.js","components/Token/index.js","components/Column/index.js","components/GameBoard/index.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["HUD","_ref","scores","handleRefresh","react_default","a","createElement","className","id","user","cpu","onClick","Token","concat","Slot","components_Token","Column","_ref2","slotStates","ind","isColumnFull","every","slot","undefined","slots","map","i","Column_Slot","key","GameBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentUser","handleUserColSelect","bind","assertThisInitialized","getUpdatedColumnList","isWinner","handleAdvanceTurn","setCPUMove","colIndex","isClosed","columns","some","el","openSlot","factorDepth","slotIndex","updatedColumn","updatedColumnList","_this2","role","_","memo","toRoleIndex","s","onlyIndices","onlyInMemo","length","indexOf","updatedMemo","filter","test","_this3","console","log","incrementScore","handleWinner","updatedUser","setState","openColumns","column","c","window","setTimeout","closeOutTime","handleTie","_this4","cpuSelectedColumn","Math","floor","random","_this5","components_Column","style","gridTemplateColumns","Component","Modal","containerClassNames","transitionTime","closeModal","children","App","initFactorDepth","initScores","initState","showGameBoard","winner","getNewColumns","depth","arrayTemplate","Array","from","amt","_scores","opponentRole","defineProperty","successIncrement","increment","toggleState","assign","components_HUD","components_GameBoard","components_Modal","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4f61b74.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './HUD.css';\r\n\r\nconst HUD = ({scores, handleRefresh}) => {\r\n    return (\r\n        <div className=\"heads-up-display\">\r\n            <div id=\"user-score\">\r\n                <div>{scores.user}</div>\r\n                <div>User</div>\r\n            </div>\r\n            <div id=\"cpu-score\">\r\n                <div>{scores.cpu}</div>\r\n                <div>CPU</div>\r\n            </div>\r\n            <div id=\"controls\">\r\n                <button onClick={handleRefresh}>Restart</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HUD;","import React from 'react';\r\nimport './Token.css';\r\n\r\nconst Token = ({user}) => (\r\n\t<div className={`token ${user}`}></div>\r\n);\r\n\r\nexport default Token;","import React from 'react';\r\nimport Token from '../Token';\r\nimport './Column.css';\r\n\r\nconst Slot = ({user}) => (\r\n\t<div className=\"slot\">\r\n\t\t{user && <Token user={user}/>}\r\n\t</div>\r\n);\r\n\r\nconst Column = ({slotStates, ind, onClick}) => {\r\n\tconst isColumnFull = slotStates.every(slot => slot !== undefined);\r\n\tconst slots = slotStates.map((user, i) => <Slot key={i} user={user}/>);\r\n\treturn (\r\n\t\t<div className={`column ${isColumnFull ? 'closed' : 'open'}`} onClick={() => onClick(ind)}>\r\n\t\t\t{slots}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Column;","import React, { Component } from 'react';\r\nimport Column from '../Column';\r\nimport './GameBoard.css';\r\n\r\nclass GameBoard extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcurrentUser: 'user'\r\n\t\t};\r\n\t\tthis.handleUserColSelect = this.handleUserColSelect.bind(this);\r\n\t\tthis.getUpdatedColumnList = this.getUpdatedColumnList.bind(this);\r\n\t\tthis.isWinner = this.isWinner.bind(this);\r\n\t\tthis.handleAdvanceTurn = this.handleAdvanceTurn.bind(this);\r\n\t\tthis.setCPUMove = this.setCPUMove.bind(this);\r\n\t}\r\n\r\n\thandleUserColSelect(colIndex) {\r\n\t\tif (this.state.currentUser !== 'user' || this.props.isClosed) return;\r\n\t\tconst isColOpen = this.props.columns[colIndex].some(el => el === undefined);\r\n\t\tif (!isColOpen) return;\r\n\t\tthis.handleAdvanceTurn(this.getUpdatedColumnList(colIndex));\r\n\t}\r\n\t\r\n\tgetUpdatedColumnList(colIndex) {\r\n\t\tlet openSlot = this.props.factorDepth - 1;\r\n\t\tfor (let slotIndex = 0; slotIndex <= openSlot; slotIndex++) {\r\n\t\t\tif (this.props.columns[colIndex][slotIndex] !== undefined) {\r\n\t\t\t\topenSlot = slotIndex - 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst updatedColumn = this.props.columns[colIndex];\r\n\t\tupdatedColumn[openSlot] = this.state.currentUser;\r\n\t\tconst updatedColumnList = this.props.columns;\r\n\t\tupdatedColumnList[colIndex] = updatedColumn;\r\n\t\treturn updatedColumnList;\r\n\t}\r\n\t\r\n\tisWinner() {\r\n\t\tconst diagonal = (role) => {\r\n\t\t\tconst equalIndex = (_, colIndex) => this.props.columns[colIndex][colIndex] === role;\r\n\t\t\treturn this.props.columns.every(equalIndex);\r\n\t\t}\r\n\t\tconst invertedDiagonal = (role) => {\r\n\t\t\tconst invertedIndex = (_, colIndex) => this.props.columns[colIndex][this.props.factorDepth - 1 - colIndex] === role;\r\n\t\t\treturn this.props.columns.every(invertedIndex);\r\n\t\t};\r\n\t\tconst horizontalLine = (role) => {\r\n\t\t\tlet memo = [];\r\n\t\t\tconst toRoleIndex = (s, i) => s === role ? i : null;\r\n\t\t\tconst onlyIndices = (i) => i !== null;\r\n\t\t\tconst onlyInMemo= (i) => memo.length === 0 ? true : memo.indexOf(i) > -1;\r\n\t\t\tfor (let colIndex = 0; colIndex < this.props.factorDepth; colIndex++) {\r\n\t\t\t\tconst updatedMemo = this.props.columns[colIndex]\r\n\t\t\t\t\t.map(toRoleIndex)\r\n\t\t\t\t\t.filter(onlyIndices);\r\n\t\t\t\tif (updatedMemo.length === 0) return false;\r\n\t\t\t\telse {\r\n\t\t\t\t\tmemo = updatedMemo.filter(onlyInMemo);\r\n\t\t\t\t\tif (memo.length === 0) return false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconst verticalLine = (role) => {\r\n\t\t\tconst isColumnFull = (_, colIndex) => this.props.columns[colIndex].every(slot => slot === role);\r\n\t\t\treturn this.props.columns.some(isColumnFull);\r\n\t\t}\r\n\t\tconst winnerTests = [\r\n\t\t\tdiagonal,\r\n\t\t\tinvertedDiagonal,\r\n\t\t\thorizontalLine,\r\n\t\t\tverticalLine\r\n\t\t];\r\n\t\treturn winnerTests.some(test => test(this.state.currentUser));\r\n\t}\r\n\r\n\thandleAdvanceTurn(updatedColumnList) {\r\n\t\tconsole.log('handleAdvanceTurn');\r\n\t\tthis.props.incrementScore(this.state.currentUser, 1);\r\n\t\tconst isWinner = this.isWinner();\r\n\t\tif (isWinner) this.props.handleWinner(this.state.currentUser);\r\n\t\tconst updatedUser = this.state.currentUser === 'user' ? 'cpu' : 'user';\r\n\t\tthis.setState({\r\n\t\t\tcurrentUser: updatedUser\r\n\t\t}, () => {\r\n\t\t\tconst openColumns = this.props.columns\r\n\t\t\t\t.map((column, colIndex) => column.some(slot => slot === undefined) ? colIndex : null)\r\n\t\t\t\t.filter(c => c !== null);\r\n\t\t\tif (this.state.currentUser === 'cpu') {\r\n\t\t\t\tif (isWinner) window.setTimeout(this.setCPUMove, this.props.closeOutTime * 2)\r\n\t\t\t\telse this.setCPUMove();\r\n\t\t\t}\r\n\t\t\tif (this.state.currentUser === 'user') {\r\n\t\t\t\tif (openColumns.length === 0) {\r\n\t\t\t\t\tthis.props.handleTie();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tsetCPUMove() {\r\n\t\tconst openColumns = this.props.columns\r\n\t\t\t.map((column, colIndex) => column.some(slot => slot === undefined) ? colIndex : null)\r\n\t\t\t.filter(c => c !== null);\r\n\t\tconsole.log('setCPUMove', openColumns);\r\n\t\tif (openColumns.length === 0) {\r\n\t\t\tthis.props.handleTie();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst cpuRandIndex = Math.floor(Math.random() * openColumns.length);\r\n\t\tconst cpuSelectedColumn = openColumns[cpuRandIndex];\r\n\t\twindow.setTimeout(\r\n\t\t\t() => this.handleAdvanceTurn(this.getUpdatedColumnList(cpuSelectedColumn))\r\n\t\t\t, 400);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst columns = this.props.columns.map((slotStates, i) => <Column key={i} ind={i} onClick={this.handleUserColSelect} slotStates={slotStates}/>);\r\n\t\treturn (\r\n\t\t\t<div className=\"columns-container\" style={{gridTemplateColumns: `repeat(${this.props.factorDepth}, 64px)`}}>\r\n\t\t\t\t{columns}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default GameBoard;","import React, { Component } from 'react';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            containerClassNames: ''\r\n        };\r\n        this.transitionTime = 400; //find a way to clean up - duplicate value in stylesheet\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n        fade in modal container by adding a class after 100ms\r\n        declare callback for setState: set class to closed\r\n        */\r\n        const closeModal = () => {\r\n            return window.setTimeout(() => this.setState({\r\n                containerClassNames: 'closed'\r\n            }), this.props.closeOutTime - this.transitionTime)\r\n        }\r\n        window.setTimeout(() => this.setState({\r\n            containerClassNames: 'open'\r\n        }, closeModal)\r\n        , 50);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`modal-container${this.state.containerClassNames !== '' ? ' ' + this.state.containerClassNames : ''}`}>\r\n                <div className=\"modal\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport HUD from './components/HUD';\r\nimport GameBoard from './components/GameBoard';\r\nimport Modal from './components/Modal';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.initFactorDepth = 3;\r\n\t\tthis.initScores = {\r\n\t\t\tuser: 0,\r\n\t\t\tcpu: 0\r\n\t\t};\r\n\t\tthis.initState = {\r\n\t\t\tshowGameBoard: true,\r\n\t\t\tfactorDepth: this.initFactorDepth,\r\n\t\t\tscores: this.initScores,\r\n\t\t\twinner: undefined,\r\n\t\t\tcolumns: this.getNewColumns()\r\n\t\t};\r\n\t\tthis.state = this.initState;\r\n\t\tthis.closeOutTime = 2500;\r\n\t\tthis.handleWinner = this.handleWinner.bind(this);\r\n\t\tthis.getNewColumns = this.getNewColumns.bind(this);\r\n\t\tthis.incrementScore = this.incrementScore.bind(this);\r\n\t\tthis.handleRefresh = this.handleRefresh.bind(this);\r\n\t}\r\n\r\n\tgetNewColumns(depth) {\r\n\t\tconst levelUpFactorDepth = depth !== undefined ? depth : (this.state ? this.state.factorDepth + 1 : this.initFactorDepth);\r\n\t\tconst arrayTemplate = {\r\n\t\t\tlength: levelUpFactorDepth\r\n\t\t};\r\n\t\treturn Array.from(arrayTemplate, _ => Array.from(arrayTemplate, _ => undefined));\r\n\t}\r\n\r\n\tincrementScore(role, amt) {\r\n\t\tconst opponentRole = role === 'user' ? 'cpu' : 'user';\r\n\t\tconst scores = {\r\n\t\t\t[role]: this.state.scores[role] + (amt ? amt : 1),\r\n\t\t\t[opponentRole]: this.state.scores[opponentRole]\r\n\t\t};\r\n\t\tthis.setState({scores});\r\n\t}\r\n\t\r\n\thandleWinner(winner) {\r\n\t\t//console.log('handleWinner', winner);\r\n\t\tconst successIncrement = this.state.factorDepth * 2;\r\n\t\tconst increment = winner === 'tie' ? -successIncrement : 1;\r\n\t\tconst user = winner === 'user' ? this.state.scores.user + successIncrement : this.state.scores.user + increment;\r\n\t\tconst cpu = winner === 'cpu' ? this.state.scores.cpu + successIncrement : this.state.scores.cpu + increment;\r\n\t\tconst scores = {\r\n\t\t\tuser,\r\n\t\t\tcpu\r\n\t\t};\r\n\t\tthis.setState({\r\n\t\t\twinner,\r\n\t\t\tscores\r\n\t\t}, () => {\r\n\t\t\treturn window.setTimeout(() => this.handleRefresh(winner === 'tie' ? -1 : 1), this.closeOutTime);\r\n\t\t});\r\n\t}\r\n\r\n\thandleRefresh(increment) {\r\n\t\tconsole.log('handleRefresh', increment);\r\n\t\tconst factorDepth = increment ? this.state.factorDepth + increment : this.initFactorDepth;\r\n\t\tconst scores = increment ? this.state.scores : this.initScores;\r\n\t\tconst toggleState = Object.assign({}, this.initState, {\r\n\t\t\tshowGameBoard: false,\r\n\t\t\tfactorDepth,\r\n\t\t\tcolumns: this.getNewColumns(factorDepth),\r\n\t\t\tscores\r\n\t\t});\r\n\t\tconsole.log('toggleState', toggleState);\r\n\t\tthis.setState(toggleState, () => {\r\n\t\t\twindow.setTimeout(() => this.setState({\r\n\t\t\t\tshowGameBoard: true\r\n\t\t\t}), 10)\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n\t\t\t\t<div id=\"display\">\r\n\t\t\t\t\t<HUD\r\n\t\t\t\t\t\tscores={this.state.scores}\r\n\t\t\t\t\t\thandleRefresh={() => this.handleRefresh()}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{this.state.showGameBoard && (\r\n\t\t\t\t\t\t<GameBoard\r\n\t\t\t\t\t\t\tisClosed={this.state.winner !== undefined}\r\n\t\t\t\t\t\t\tfactorDepth={this.state.factorDepth}\r\n\t\t\t\t\t\t\tcolumns={this.state.columns}\r\n\t\t\t\t\t\t\tincrementScore={this.incrementScore}\r\n\t\t\t\t\t\t\thandleWinner={this.handleWinner}\r\n\t\t\t\t\t\t\thandleTie={() => this.handleWinner('tie')}\r\n\t\t\t\t\t\t\tcloseOutTime={this.closeOutTime}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.state.winner && (\r\n\t\t\t\t\t<Modal\r\n\t\t\t\t\t\tcloseOutTime={this.closeOutTime}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<p>{this.state.winner === 'tie' ? 'Tie...' : 'Winner!'}</p>\r\n\t\t\t\t\t\t<p>{this.state.winner === 'tie' ? ':-(' : this.state.winner}</p>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}